// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DigitalOcean Block Storage volume which can be attached to a Droplet in order to provide expanded storage.
type Volume struct {
	s *pulumi.ResourceState
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOpt) (*Volume, error) {
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["region"] = nil
		inputs["size"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["region"] = args.Region
		inputs["size"] = args.Size
	}
	inputs["dropletIds"] = nil
	inputs["id"] = nil
	s, err := ctx.RegisterResource("digitalocean:index/volume:Volume", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeState, opts ...pulumi.ResourceOpt) (*Volume, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["dropletIds"] = state.DropletIds
		inputs["id"] = state.Id
		inputs["name"] = state.Name
		inputs["region"] = state.Region
		inputs["size"] = state.Size
	}
	s, err := ctx.ReadResource("digitalocean:index/volume:Volume", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Volume) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Volume) ID() *pulumi.IDOutput {
	return r.s.ID
}

// A free-form text field up to a limit of 1024 bytes to describe a block storage volume.
func (r *Volume) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// A list of associated droplet ids
func (r *Volume) DropletIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["dropletIds"])
}

// The unique identifier for the block storage volume.
func (r *Volume) Id() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["id"])
}

// A name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters.
func (r *Volume) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The region that the block storage volume will be created in.
func (r *Volume) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The size of the block storage volume in GiB.
func (r *Volume) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

// Input properties used for looking up and filtering Volume resources.
type VolumeState struct {
	// A free-form text field up to a limit of 1024 bytes to describe a block storage volume.
	Description interface{}
	// A list of associated droplet ids
	DropletIds interface{}
	// The unique identifier for the block storage volume.
	Id interface{}
	// A name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters.
	Name interface{}
	// The region that the block storage volume will be created in.
	Region interface{}
	// The size of the block storage volume in GiB.
	Size interface{}
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// A free-form text field up to a limit of 1024 bytes to describe a block storage volume.
	Description interface{}
	// A name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters.
	Name interface{}
	// The region that the block storage volume will be created in.
	Region interface{}
	// The size of the block storage volume in GiB.
	Size interface{}
}
