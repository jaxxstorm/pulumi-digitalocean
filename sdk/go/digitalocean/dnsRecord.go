// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DigitalOcean DNS record resource.
type DnsRecord struct {
	s *pulumi.ResourceState
}

// NewDnsRecord registers a new resource with the given unique name, arguments, and options.
func NewDnsRecord(ctx *pulumi.Context,
	name string, args *DnsRecordArgs, opts ...pulumi.ResourceOpt) (*DnsRecord, error) {
	if args == nil || args.Domain == nil {
		return nil, errors.New("missing required argument 'Domain'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["domain"] = nil
		inputs["name"] = nil
		inputs["port"] = nil
		inputs["priority"] = nil
		inputs["ttl"] = nil
		inputs["type"] = nil
		inputs["value"] = nil
		inputs["weight"] = nil
	} else {
		inputs["domain"] = args.Domain
		inputs["name"] = args.Name
		inputs["port"] = args.Port
		inputs["priority"] = args.Priority
		inputs["ttl"] = args.Ttl
		inputs["type"] = args.Type
		inputs["value"] = args.Value
		inputs["weight"] = args.Weight
	}
	inputs["fqdn"] = nil
	s, err := ctx.RegisterResource("digitalocean:index/dnsRecord:DnsRecord", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DnsRecord{s: s}, nil
}

// GetDnsRecord gets an existing DnsRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsRecord(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DnsRecordState, opts ...pulumi.ResourceOpt) (*DnsRecord, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["domain"] = state.Domain
		inputs["fqdn"] = state.Fqdn
		inputs["name"] = state.Name
		inputs["port"] = state.Port
		inputs["priority"] = state.Priority
		inputs["ttl"] = state.Ttl
		inputs["type"] = state.Type
		inputs["value"] = state.Value
		inputs["weight"] = state.Weight
	}
	s, err := ctx.ReadResource("digitalocean:index/dnsRecord:DnsRecord", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DnsRecord{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DnsRecord) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DnsRecord) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The domain to add the record to
func (r *DnsRecord) Domain() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["domain"])
}

// The FQDN of the record
func (r *DnsRecord) Fqdn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fqdn"])
}

// The name of the record
func (r *DnsRecord) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The port of the record, for SRV records.
func (r *DnsRecord) Port() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["port"])
}

// The priority of the record, for MX and SRV
// records.
func (r *DnsRecord) Priority() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["priority"])
}

// The time to live for the record, in seconds.
func (r *DnsRecord) Ttl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ttl"])
}

// The type of record
func (r *DnsRecord) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// The value of the record
func (r *DnsRecord) Value() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["value"])
}

// The weight of the record, for SRV records.
func (r *DnsRecord) Weight() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["weight"])
}

// Input properties used for looking up and filtering DnsRecord resources.
type DnsRecordState struct {
	// The domain to add the record to
	Domain interface{}
	// The FQDN of the record
	Fqdn interface{}
	// The name of the record
	Name interface{}
	// The port of the record, for SRV records.
	Port interface{}
	// The priority of the record, for MX and SRV
	// records.
	Priority interface{}
	// The time to live for the record, in seconds.
	Ttl interface{}
	// The type of record
	Type interface{}
	// The value of the record
	Value interface{}
	// The weight of the record, for SRV records.
	Weight interface{}
}

// The set of arguments for constructing a DnsRecord resource.
type DnsRecordArgs struct {
	// The domain to add the record to
	Domain interface{}
	// The name of the record
	Name interface{}
	// The port of the record, for SRV records.
	Port interface{}
	// The priority of the record, for MX and SRV
	// records.
	Priority interface{}
	// The time to live for the record, in seconds.
	Ttl interface{}
	// The type of record
	Type interface{}
	// The value of the record
	Value interface{}
	// The weight of the record, for SRV records.
	Weight interface{}
}
